// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7w3AimKvhNQygAijpdB7ms
// Component: yZ_cQNVr9Dd_
import * as React from "react";
import { Link, navigate as __gatsbyNavigate } from "gatsby";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  get as $stateGet,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: XhHp-qufC92V/component
import { useScreenVariants as useScreenVariantsnU8IdsSvi2F6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nU8idsSVI2F6/globalVariant
import { useClicked } from "./PlasmicGlobalVariant__Clicked"; // plasmic-import: S62AeS-Xkcux/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import * as projectcss from "./plasmic.module.css"; // plasmic-import: 7w3AimKvhNQygAijpdB7ms/projectcss
import * as sty from "./PlasmicNavbar.module.css"; // plasmic-import: yZ_cQNVr9Dd_/css
import MenuList1527SvgrepoComSvgIcon from "./icons/PlasmicIcon__MenuList1527SvgrepoComSvg"; // plasmic-import: AkvKAnhj5gsm/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 13gtm4V3y2AB/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 5Ji1vGCP__gF/icon
import ackrellWebsitePngTmW9TW4S5VL from "./images/ackrellWebsitePng.png"; // plasmic-import: TmW9t-W4S5vL/picture

createPlasmicElementProxy;

export const PlasmicNavbar__VariantProps = new Array("click", "click3");

export const PlasmicNavbar__ArgProps = new Array();

const $$ = {};

function PlasmicNavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "click",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.click
      },
      {
        path: "click3",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.click3
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnU8IdsSvi2F6(),
    clicked: useClicked()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootclick3]: hasVariant($state, "click3", "click3"),
          [sty.rootclick]: hasVariant($state, "click", "click"),
          [sty.rootglobal_clicked_clicked]: hasVariant(
            globalVariants,
            "clicked",
            "clicked"
          )
        }
      )}
    >
      <MenuList1527SvgrepoComSvgIcon
        className={classNames(projectcss.all, sty.svg__v2Szu, {
          [sty.svgclick3__v2SzuOsgHj]: hasVariant($state, "click3", "click3")
        })}
        onClick={async event => {
          const $steps = {};
          $steps["updateClick3"] = true
            ? (() => {
                const actionArgs = { vgroup: "click3", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }
                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateClick3"] != null &&
            typeof $steps["updateClick3"] === "object" &&
            typeof $steps["updateClick3"].then === "function"
          ) {
            $steps["updateClick3"] = await $steps["updateClick3"];
          }
        }}
        role={"img"}
      />

      <PlasmicLink__
        className={classNames(projectcss.all, projectcss.a, sty.link__zbTas, {
          [sty.linkclick3__zbTasOsgHj]: hasVariant($state, "click3", "click3"),
          [sty.linkglobal_clicked_clicked__zbTasg4Jcs]: hasVariant(
            globalVariants,
            "clicked",
            "clicked"
          )
        })}
        component={Link}
        href={`/`}
        platform={"gatsby"}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__b4Tr, {
            [sty.imgglobal_clicked_clicked__b4TrG4Jcs]: hasVariant(
              globalVariants,
              "clicked",
              "clicked"
            )
          })}
          displayHeight={"45px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          src={{
            src: ackrellWebsitePngTmW9TW4S5VL,
            fullWidth: 1500,
            fullHeight: 663,
            aspectRatio: undefined
          }}
        />
      </PlasmicLink__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__xfhRc, {
          [sty.freeBoxglobal_clicked_clicked__xfhRcg4Jcs]: hasVariant(
            globalVariants,
            "clicked",
            "clicked"
          )
        })}
      >
        <PlasmicLink__
          className={classNames(projectcss.all, projectcss.a, sty.link___9FnJ)}
          component={Link}
          href={`/`}
          platform={"gatsby"}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___5Y12V)}
            displayHeight={"45px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            src={{
              src: ackrellWebsitePngTmW9TW4S5VL,
              fullWidth: 1500,
              fullHeight: 663,
              aspectRatio: undefined
            }}
          />
        </PlasmicLink__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__d960F, {
            [sty.freeBoxclick3__d960FOsgHj]: hasVariant(
              $state,
              "click3",
              "click3"
            ),
            [sty.freeBoxglobal_clicked_clicked__d960Fg4Jcs]: hasVariant(
              globalVariants,
              "clicked",
              "clicked"
            )
          })}
        >
          <Button
            className={classNames("__wab_instance", sty.button__e9Er4)}
            color={"clear"}
            endIcon={
              <Icon4Icon
                className={classNames(projectcss.all, sty.svg__nBvst)}
                role={"img"}
              />
            }
            link={"        "}
            startIcon={
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg__ifMgF)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__zfdWz
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};
                $steps["goToAboutUs"] = true
                  ? (() => {
                      const actionArgs = { destination: `/about-us` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __gatsbyNavigate(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToAboutUs"] != null &&
                  typeof $steps["goToAboutUs"] === "object" &&
                  typeof $steps["goToAboutUs"].then === "function"
                ) {
                  $steps["goToAboutUs"] = await $steps["goToAboutUs"];
                }
              }}
              platform={"gatsby"}
            >
              {"About us"}
            </PlasmicLink__>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button___8Y0K3)}
            color={"clear"}
            endIcon={
              <Icon4Icon
                className={classNames(projectcss.all, sty.svg__rOiSl)}
                role={"img"}
              />
            }
            link={`/services`}
            startIcon={
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg___2WOs6)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__rFpZc
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};
                $steps["goToServices"] = true
                  ? (() => {
                      const actionArgs = { destination: `/services` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __gatsbyNavigate(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToServices"] != null &&
                  typeof $steps["goToServices"] === "object" &&
                  typeof $steps["goToServices"].then === "function"
                ) {
                  $steps["goToServices"] = await $steps["goToServices"];
                }
              }}
              platform={"gatsby"}
            >
              {"Services"}
            </PlasmicLink__>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__dzSy)}
            color={"clear"}
            endIcon={
              <Icon4Icon
                className={classNames(projectcss.all, sty.svg__aYjtp)}
                role={"img"}
              />
            }
            link={`/transactions`}
            startIcon={
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg__oOkdV)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__v3Rc
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};
                $steps["goToTransactions"] = true
                  ? (() => {
                      const actionArgs = { destination: `/transactions` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __gatsbyNavigate(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToTransactions"] != null &&
                  typeof $steps["goToTransactions"] === "object" &&
                  typeof $steps["goToTransactions"].then === "function"
                ) {
                  $steps["goToTransactions"] = await $steps["goToTransactions"];
                }
              }}
              platform={"gatsby"}
            >
              {"Transactions"}
            </PlasmicLink__>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__aSs0Y)}
            color={"clear"}
            endIcon={
              <Icon4Icon
                className={classNames(projectcss.all, sty.svg__je5C)}
                role={"img"}
              />
            }
            startIcon={
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg__anBxP)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__uuBh8
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};
                $steps["goToContactUs"] = true
                  ? (() => {
                      const actionArgs = {};
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __gatsbyNavigate(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToContactUs"] != null &&
                  typeof $steps["goToContactUs"] === "object" &&
                  typeof $steps["goToContactUs"].then === "function"
                ) {
                  $steps["goToContactUs"] = await $steps["goToContactUs"];
                }
              }}
              platform={"gatsby"}
            >
              {"Contact us"}
            </PlasmicLink__>
          </Button>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__pHt7B, {
            [sty.freeBoxclick3__pHt7BOsgHj]: hasVariant(
              $state,
              "click3",
              "click3"
            )
          })}
        >
          <button
            data-plasmic-name={"login"}
            data-plasmic-override={overrides.login}
            className={classNames(
              projectcss.all,
              projectcss.button,
              projectcss.__wab_text,
              sty.login
            )}
            onClick={async event => {
              const $steps = {};
              $steps["goToUserLogin"] = true
                ? (() => {
                    const actionArgs = { destination: "/user/login" };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __gatsbyNavigate(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToUserLogin"] != null &&
                typeof $steps["goToUserLogin"] === "object" &&
                typeof $steps["goToUserLogin"].then === "function"
              ) {
                $steps["goToUserLogin"] = await $steps["goToUserLogin"];
              }
            }}
            ref={ref => {
              $refs["login"] = ref;
            }}
          >
            {"Login"}
          </button>
          <button
            data-plasmic-name={"register"}
            data-plasmic-override={overrides.register}
            className={classNames(
              projectcss.all,
              projectcss.button,
              projectcss.__wab_text,
              sty.register
            )}
            onClick={async event => {
              const $steps = {};
              $steps["goToUserRegister"] = true
                ? (() => {
                    const actionArgs = { destination: "/user/register" };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __gatsbyNavigate(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToUserRegister"] != null &&
                typeof $steps["goToUserRegister"] === "object" &&
                typeof $steps["goToUserRegister"].then === "function"
              ) {
                $steps["goToUserRegister"] = await $steps["goToUserRegister"];
              }
            }}
            ref={ref => {
              $refs["register"] = ref;
            }}
          >
            {"Register"}
          </button>
        </Stack__>
        {(hasVariant($state, "click3", "click3") ? true : false) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__xYitP, {
              [sty.freeBoxclick3__xYitPOsgHj]: hasVariant(
                $state,
                "click3",
                "click3"
              ),
              [sty.freeBoxclick__xYitPSkcSo]: hasVariant(
                $state,
                "click",
                "click"
              )
            })}
          >
            <button
              className={classNames(
                projectcss.all,
                projectcss.button,
                projectcss.__wab_text,
                sty.button__z5Cmm
              )}
            >
              {"Sign up"}
            </button>
            <Button
              className={classNames("__wab_instance", sty.button__vCnek)}
              color={"clear"}
              endIcon={
                <Icon4Icon
                  className={classNames(projectcss.all, sty.svg__ttBx8)}
                  role={"img"}
                />
              }
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__cPMbi)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Log in"}
              </div>
            </Button>
          </div>
        ) : null}
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "login", "register", "text"],
  login: ["login"],
  register: ["register"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    login: makeNodeComponent("login"),
    register: makeNodeComponent("register"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
